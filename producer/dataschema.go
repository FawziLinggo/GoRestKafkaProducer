// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package producer

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Dataschema struct {
	Tanggal string `json:"tanggal"`

	Nama_vendor string `json:"nama_vendor"`

	Kode_barang string `json:"kode_barang"`

	Cara_bayar string `json:"cara_bayar"`

	Qty int32 `json:"qty"`

	Harga int64 `json:"harga"`

	Jumlah int64 `json:"jumlah"`
}

const DataschemaAvroCRC64Fingerprint = "D\xe5Or\xa5SO\xf2"

func NewDataschema() Dataschema {
	r := Dataschema{}
	return r
}

func DeserializeDataschema(r io.Reader) (Dataschema, error) {
	t := NewDataschema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDataschemaFromSchema(r io.Reader, schema string) (Dataschema, error) {
	t := NewDataschema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDataschema(r Dataschema, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Tanggal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nama_vendor, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Kode_barang, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cara_bayar, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Qty, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Harga, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Jumlah, w)
	if err != nil {
		return err
	}
	return err
}

func (r Dataschema) Serialize(w io.Writer) error {
	return writeDataschema(r, w)
}

func (r Dataschema) Schema() string {
	return "{\"fields\":[{\"name\":\"tanggal\",\"type\":\"string\"},{\"name\":\"nama_vendor\",\"type\":\"string\"},{\"name\":\"kode_barang\",\"type\":\"string\"},{\"name\":\"cara_bayar\",\"type\":\"string\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"harga\",\"type\":\"long\"},{\"name\":\"jumlah\",\"type\":\"long\"}],\"name\":\"confluent.io.examples.serialization.avro.dataschema\",\"type\":\"record\"}"
}

func (r Dataschema) SchemaName() string {
	return "confluent.io.examples.serialization.avro.dataschema"
}

func (_ Dataschema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Dataschema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Dataschema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Dataschema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Dataschema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Dataschema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Dataschema) SetString(v string)   { panic("Unsupported operation") }
func (_ Dataschema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Dataschema) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Tanggal}

		return w

	case 1:
		w := types.String{Target: &r.Nama_vendor}

		return w

	case 2:
		w := types.String{Target: &r.Kode_barang}

		return w

	case 3:
		w := types.String{Target: &r.Cara_bayar}

		return w

	case 4:
		w := types.Int{Target: &r.Qty}

		return w

	case 5:
		w := types.Long{Target: &r.Harga}

		return w

	case 6:
		w := types.Long{Target: &r.Jumlah}

		return w

	}
	panic("Unknown field index")
}

func (r *Dataschema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Dataschema) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Dataschema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Dataschema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Dataschema) HintSize(int)                     { panic("Unsupported operation") }
func (_ Dataschema) Finalize()                        {}

func (_ Dataschema) AvroCRC64Fingerprint() []byte {
	return []byte(DataschemaAvroCRC64Fingerprint)
}

func (r Dataschema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["tanggal"], err = json.Marshal(r.Tanggal)
	if err != nil {
		return nil, err
	}
	output["nama_vendor"], err = json.Marshal(r.Nama_vendor)
	if err != nil {
		return nil, err
	}
	output["kode_barang"], err = json.Marshal(r.Kode_barang)
	if err != nil {
		return nil, err
	}
	output["cara_bayar"], err = json.Marshal(r.Cara_bayar)
	if err != nil {
		return nil, err
	}
	output["qty"], err = json.Marshal(r.Qty)
	if err != nil {
		return nil, err
	}
	output["harga"], err = json.Marshal(r.Harga)
	if err != nil {
		return nil, err
	}
	output["jumlah"], err = json.Marshal(r.Jumlah)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Dataschema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["tanggal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tanggal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tanggal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nama_vendor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nama_vendor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nama_vendor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["kode_barang"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kode_barang); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for kode_barang")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cara_bayar"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cara_bayar); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cara_bayar")
	}
	val = func() json.RawMessage {
		if v, ok := fields["qty"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Qty); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for qty")
	}
	val = func() json.RawMessage {
		if v, ok := fields["harga"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Harga); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for harga")
	}
	val = func() json.RawMessage {
		if v, ok := fields["jumlah"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Jumlah); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for jumlah")
	}
	return nil
}
